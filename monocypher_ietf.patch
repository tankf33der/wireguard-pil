--- monocypher.c.orig	2018-02-14 21:36:48.000000000 +0200
+++ monocypher.c	2018-02-21 15:10:32.000000000 +0200
@@ -1780,26 +1780,26 @@
 void crypto_lock_aead(u8        mac[16],
                       u8       *cipher_text,
                       const u8  key[32],
-                      const u8  nonce[24],
+                      const u8  nonce[12],
                       const u8 *ad        , size_t ad_size,
                       const u8 *plain_text, size_t text_size)
 {
     crypto_lock_ctx ctx;
-    crypto_lock_init   (&ctx, key, nonce);
-    crypto_lock_auth_ad(&ctx, ad, ad_size);
-    crypto_lock_update (&ctx, cipher_text, plain_text, text_size);
-    crypto_lock_final  (&ctx, mac);
+    crypto_lock_ietf_init(&ctx, key, nonce);
+    crypto_lock_auth_ad  (&ctx, ad, ad_size);
+    crypto_lock_update   (&ctx, cipher_text, plain_text, text_size);
+    crypto_lock_final    (&ctx, mac);
 }
 
 int crypto_unlock_aead(u8       *plain_text,
                        const u8  key[32],
-                       const u8  nonce[24],
+                       const u8  nonce[12],
                        const u8  mac[16],
                        const u8 *ad         , size_t ad_size,
                        const u8 *cipher_text, size_t text_size)
 {
     crypto_unlock_ctx ctx;
-    crypto_unlock_init        (&ctx, key, nonce);
+    crypto_unlock_ietf_init   (&ctx, key, nonce);
     crypto_unlock_auth_ad     (&ctx, ad, ad_size);
     crypto_unlock_auth_message(&ctx, cipher_text, text_size);
     crypto_chacha_ctx chacha_ctx = ctx.chacha; // avoid the wiping...
@@ -1830,3 +1830,29 @@
     return crypto_unlock_aead(plain_text, key, nonce, mac, 0, 0,
                               cipher_text, text_size);
 }
+
+void crypto_chacha20_ietf_init(crypto_chacha_ctx *ctx,
+                               const uint8_t key[32],
+                               const uint8_t nonce[12])
+{
+        crypto_chacha20_init   (ctx, key, nonce + 4);
+        crypto_chacha20_set_ctr(ctx,
+                                  (uint64_t)nonce[0] << 32
+                                | (uint64_t)nonce[1] << 40
+                                | (uint64_t)nonce[2] << 48
+                                | (uint64_t)nonce[3] << 56);
+}
+
+void crypto_lock_ietf_init(crypto_lock_ctx *ctx,
+                           const uint8_t key  [32],
+                           const uint8_t nonce[12]) // 96 bits!
+{
+        u8 auth_key[64]; // "Wasting" the whole Chacha block is faster
+        ctx->ad_phase     = 1;
+        ctx->ad_size      = 0;
+        ctx->message_size = 0;
+        crypto_chacha20_ietf_init(&ctx->chacha, key, nonce); // IETF!
+        crypto_chacha20_stream(&ctx->chacha, auth_key, 64);
+        crypto_poly1305_init  (&ctx->poly  , auth_key);
+        WIPE_BUFFER(auth_key);
+}
--- monocypher.h.orig	2018-02-13 22:30:07.000000000 +0200
+++ monocypher.h	2018-02-21 13:09:34.000000000 +0200
@@ -102,12 +102,12 @@
 void crypto_lock_aead(uint8_t        mac[16],
                       uint8_t       *cipher_text,
                       const uint8_t  key[32],
-                      const uint8_t  nonce[24],
+                      const uint8_t  nonce[12],
                       const uint8_t *ad        , size_t ad_size,
                       const uint8_t *plain_text, size_t text_size);
 int crypto_unlock_aead(uint8_t       *plain_text,
                        const uint8_t  key[32],
-                       const uint8_t  nonce[24],
+                       const uint8_t  nonce[12],
                        const uint8_t  mac[16],
                        const uint8_t *ad         , size_t ad_size,
                        const uint8_t *cipher_text, size_t text_size);
@@ -129,6 +129,7 @@
 
 // Incremental interface (decryption)
 #define crypto_unlock_init         crypto_lock_init
+#define crypto_unlock_ietf_init    crypto_lock_ietf_init
 #define crypto_unlock_auth_ad      crypto_lock_auth_ad
 #define crypto_unlock_auth_message crypto_lock_auth_message
 void crypto_unlock_update(crypto_unlock_ctx *ctx,
@@ -276,4 +277,11 @@
                   const uint8_t your_secret_key  [32],
                   const uint8_t their_public_key [32]);
 
+void crypto_chacha20_ietf_init(crypto_chacha_ctx *ctx,
+                               const uint8_t  key[32],
+                               const uint8_t  nonce[12]);
+void crypto_lock_ietf_init(crypto_lock_ctx *ctx,
+                           const uint8_t key  [32],
+                           const uint8_t nonce[12]);
+
 #endif // MONOCYPHER_H
